basePath: /
definitions:
  domain.Address:
    properties:
      cep:
        type: string
      customer_id:
        type: integer
      id:
        type: integer
      neighborhood:
        type: string
      street:
        type: string
    type: object
  domain.Category:
    properties:
      description:
        type: string
      id:
        type: integer
    type: object
  domain.Customer:
    properties:
      addresses:
        items:
          $ref: '#/definitions/domain.Address'
        type: array
      birthday:
        type: string
      cpf:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      instagram:
        type: string
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  domain.Employee:
    properties:
      cpf:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  domain.Product:
    properties:
      barcode:
        type: string
      category:
        $ref: '#/definitions/domain.Category'
      created_at:
        type: string
      created_by:
        $ref: '#/definitions/domain.Employee'
      id:
        type: integer
      is_feedstock:
        type: boolean
      name:
        type: string
      purchase_price:
        type: number
      sale_price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
      updated_by:
        $ref: '#/definitions/domain.Employee'
    type: object
  requests.CreateProductRequest:
    properties:
      category_id:
        type: integer
      created_by:
        type: integer
      is_feedstock:
        type: boolean
      name:
        type: string
      purchase_price:
        type: number
      sale_price:
        type: number
      stock:
        type: integer
    type: object
  requests.UpdateProductRequest:
    properties:
      category_id:
        type: integer
      id:
        type: integer
      is_feedstock:
        type: boolean
      name:
        type: string
      purchase_price:
        type: number
      sale_price:
        type: number
      stock:
        type: integer
      updated_by:
        type: integer
    type: object
  responses.ProductResponse:
    properties:
      category:
        $ref: '#/definitions/domain.Category'
      created_at:
        type: string
      id:
        type: integer
      is_feedstock:
        type: boolean
      name:
        type: string
      stock:
        type: integer
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample swagger for Fiber
  title: Fiber Example API
  version: "1.0"
paths:
  /categories:
    get:
      description: Obtém todas as categorias sem filtro ou ordenação.
      produces:
      - application/json
      responses:
        "200":
          description: Uma lista de categorias
          schema:
            items:
              $ref: '#/definitions/domain.Category'
            type: array
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Obter todas as categorias
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Cria uma nova categoria de produtos.
      parameters:
      - description: Categoria a ser criada
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/domain.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Categoria criada com sucesso
          schema:
            type: string
        "400":
          description: Erro de validação
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Criar uma categoria
      tags:
      - categories
  /customers:
    get:
      consumes:
      - application/json
      description: |-
        Obtém uma lista de clientes paginada.
        Filtros disponíveis: name (nome) e cpf.
        Campos disponíveis para ordenação (em inglês): name, created_at e updated_at (orderBy)
        Para ordenação, pode ser utilizado o mecanismo ascendente e descendente (ASC e DESC) (order)
        offset: utilizado para paginação, define a quantidade de itens a serem "pulados".
        limit: utilizado para paginação, define a quantidade máxima de itens a serem obtidos.
      parameters:
      - description: Limite de itens a serem obtidos
        in: query
        name: limit
        type: integer
      - description: Quantidade de itens a serem pulados
        in: query
        name: offset
        type: integer
      - description: Nome do campo para ordenação
        in: query
        name: order_by
        type: string
      - description: ASC ou DESC para ordenação
        in: query
        name: order
        type: string
      - description: Nome para filtro
        in: query
        name: name
        type: string
      - description: CPF para filtro
        in: query
        name: cpf
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Uma lista de clientes
          schema:
            items:
              $ref: '#/definitions/domain.Customer'
            type: array
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Obter uma lista de clientes paginada, ordenada e filtrada
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: |-
        Cria um novo cliente.
        Campos obrigatórios: nome.
        Campos opcionais: CPF, telefone, e-mail, instagram e data de nascimento.
        Uma lista de endereços também pode ser cadastrada para o cliente.
        Campos obrigatórios: Rua e bairro.
        Campos opcionais: CEP.
      parameters:
      - description: Cliente a ser criado
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/domain.Customer'
      produces:
      - application/json
      responses:
        "201":
          description: Cliente criado com sucesso
          schema:
            type: string
        "400":
          description: Erro de validação
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Criar um novo cliente
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: |-
        Atualiza um cliente.
        Campos obrigatórios: nome.
        Campos opcionais: CPF, telefone, e-mail, instagram e data de nascimento.
        Os endereços também podem ser atualizados. Para criar um endereço, envie um objeto com id vazio. Para deletar um endereço existente, não o envie na lista.
        Campos obrigatórios: Rua e bairro.
        Campos opcionais: CEP.
      parameters:
      - description: Id do cliente a ser atualizado
        in: path
        name: id
        required: true
        type: integer
      - description: Cliente a ser atualizado
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/domain.Customer'
      produces:
      - application/json
      responses:
        "204":
          description: Cliente atualizado com sucesso
        "400":
          description: Erro de validação
          schema:
            type: string
        "404":
          description: Cliente não encontrado
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Atualizar cliente
      tags:
      - customers
  /customers/{id}:
    delete:
      description: Deleta um cliente por id.
      parameters:
      - description: Id do cliente
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Erro de validação
          schema:
            type: string
        "404":
          description: Cliente não encontrado
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Deleta um cliente
      tags:
      - customers
    get:
      description: Obtém um cliente por id.
      parameters:
      - description: Id do cliente
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: O cliente encontrado
          schema:
            $ref: '#/definitions/domain.Customer'
        "400":
          description: Erro de validação
          schema:
            type: string
        "404":
          description: Cliente não encontrado
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Obter um cliente
      tags:
      - customers
  /employees:
    post:
      consumes:
      - application/json
      description: |-
        Cria um novo funcionário.
        Campos obrigatórios: nome e CPF.
      parameters:
      - description: Funcionário a ser criado
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/domain.Employee'
      produces:
      - application/json
      responses:
        "201":
          description: Funcionário criado com sucesso
          schema:
            type: string
        "400":
          description: Erro de validação
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Criar um novo funcionário
      tags:
      - employees
  /employees/{id}:
    get:
      description: Obtém um funcionário por id.
      parameters:
      - description: Id do funcionário a ser obtido
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: O funcionário encontrado
          schema:
            $ref: '#/definitions/domain.Employee'
        "400":
          description: Erro de validação
          schema:
            type: string
        "404":
          description: Cliente não encontrado
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Obter um funcionário
      tags:
      - employees
  /products:
    get:
      consumes:
      - application/json
      description: |-
        Obtém uma lista de produtos paginada.
        Requisitos funcionais relacionados: 2B.
        Filtros disponíveis: name (nome), is_feedstock (se é matéria prima), category_id (id da categoria).
        Campos disponíveis para ordenação (em inglês): name e created_at (orderBy)
        Para ordenação, pode ser utilizado o mecanismo ascendente e descendente (ASC e DESC) (order)
        offset: utilizado para paginação, define a quantidade de itens a serem "pulados".
        limit: utilizado para paginação, define a quantidade máxima de itens a serem obtidos.
      parameters:
      - description: Limite de itens a serem obtidos
        in: query
        name: limit
        type: integer
      - description: Quantidade de itens a serem pulados
        in: query
        name: offset
        type: integer
      - description: Nome do campo para ordenação (name, created_at)
        in: query
        name: order_by
        type: string
      - description: ASC ou DESC para ordenação
        in: query
        name: order
        type: string
      - description: Nome para filtro
        in: query
        name: name
        type: string
      - description: Se é matéria prima ou não para filtro (True ou False)
        in: query
        name: is_feedstock
        type: string
      - description: Id da categoria do produto para filtro
        in: query
        name: category_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Uma lista de produtos
          schema:
            items:
              $ref: '#/definitions/responses.ProductResponse'
            type: array
        "400":
          description: Erro de validação
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Obter uma lista de produtos paginada, ordenada e filtrada
      tags:
      - products
    post:
      consumes:
      - application/json
      description: |-
        Cria um novo produto.
        Requisitos funcionais relacionados: 2A.
      parameters:
      - description: Produto a ser criado
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/requests.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Produto criado com sucesso
          schema:
            type: string
        "400":
          description: Erro de validação
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Criar um novo produto
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Deleta um produto pelo id.
        Requisitos funcionais relacionados: 2D.
      parameters:
      - description: Id do produto a ser deletado
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Produto deletado com sucesso
        "400":
          description: Erro de validação
          schema:
            type: string
        "404":
          description: Produto não encontrado
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Deleta um produto
      tags:
      - products
    get:
      consumes:
      - application/json
      description: |-
        Obtém um produto pelo id.
        Requisitos funcionais relacionados: 2G.
      parameters:
      - description: Id do produto a ser obtido
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Produto encontrado
          schema:
            $ref: '#/definitions/domain.Product'
        "404":
          description: Produto não encontrado
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Obter um produto
      tags:
      - products
    put:
      consumes:
      - application/json
      description: |-
        Atualiza um produto pelo id.
        Requisitos funcionais relacionados: 2C.
      parameters:
      - description: Id do produto a ser atualizado
        in: path
        name: id
        required: true
        type: integer
      - description: Informações para atualizar
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Produto atualizado com sucesso
        "400":
          description: Erro de validação
          schema:
            type: string
        "500":
          description: Erro interno do sistema
          schema:
            type: string
      summary: Atualizar produto
      tags:
      - products
schemes:
- http
- https
swagger: "2.0"
